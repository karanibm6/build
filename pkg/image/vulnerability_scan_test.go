// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0

package image_test

import (
	"context"
	"os"
	"path"

	shipwrightv1alpha1 "github.com/shipwright-io/build/pkg/apis/build/v1alpha1"
	"github.com/shipwright-io/build/pkg/image"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("VulnerabilityScanning", func() {

	Context("For an index", func() {
		vulnOptions := shipwrightv1alpha1.VulnerabilityScanOptions{
			Enabled: true,
		}
		cwd, err := os.Getwd()
		Expect(err).ToNot(HaveOccurred())
		directory := path.Clean(path.Join(cwd, "../..", "test/data/images/vuln-image-in-oci"))

		It("runs the image vulnerability scan", func() {
			//Run Vulnerablility Scan
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).NotTo(BeNil())
			Expect(len(vulns)).Should(BeNumerically(">", 0))
		})
	})

	Context("For an image", func() {
		cwd, err := os.Getwd()
		Expect(err).ToNot(HaveOccurred())
		directory := path.Clean(path.Join(cwd, "../..", "test/data/images/vuln-single-image/vuln-image.tar"))

		It("runs the image vulnerability scan", func() {
			//Run Vulnerablility Scan
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, shipwrightv1alpha1.VulnerabilityScanOptions{})
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).NotTo(BeNil())
			Expect(len(vulns)).Should(BeNumerically(">", 0))
		})

		It("should ignore the severity defined in ignore options", func() {
			vulnOptions := shipwrightv1alpha1.VulnerabilityScanOptions{
				Enabled: true,
				IgnoreOptions: &shipwrightv1alpha1.VulnerabilityIgnoreOptions{
					Severity: "LOW",
				},
			}
			// Run Vulnerablility Scan
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).NotTo(BeNil())
			Expect(len(vulns)).Should(BeNumerically(">", 0))
			Expect(severityExists(vulns, "LOW")).To(BeFalse())
		})

		It("should ignore the vulnerabilities defined in ignore options", func() {
			vulnOptions := shipwrightv1alpha1.VulnerabilityScanOptions{
				Enabled: true,
				IgnoreOptions: &shipwrightv1alpha1.VulnerabilityIgnoreOptions{
					Issues: []string{
						"CVE-2018-20843",
					},
					Unfixed: true,
				},
			}
			// Run Vulnerablility Scan
			vulns, err := image.RunVulnerabilityScan(context.TODO(), directory, vulnOptions)
			Expect(err).ToNot(HaveOccurred())
			Expect(vulns).NotTo(BeNil())
			Expect(len(vulns)).Should(BeNumerically(">", 0))
			Expect(vulnerabilityExists(vulns, vulnOptions.IgnoreOptions.Issues[0])).To(BeFalse())
		})

	})
})

func severityExists(vulns []shipwrightv1alpha1.Vulnerability, severity string) bool {
	for _, vuln := range vulns {
		if vuln.Severity == severity {
			return true
		}
	}
	return false
}

func vulnerabilityExists(vulns []shipwrightv1alpha1.Vulnerability, vulnerability string) bool {
	for _, vuln := range vulns {
		if vuln.VulnerabilityID == vulnerability {
			return true
		}
	}
	return false
}
